=head1 License
    phi programming language
    Copyright (C) 2018  Spencer Tipping

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
=cut

# TODO: move protocols into individual modules

package phi;

use strict;
use warnings;


=head2 Bootup strategy
How we get to the endpoint isn't the same as which endpoint we're going for; as
a result, the objects we use to boot phi aren't directly related to the set of
objects we ultimately want.

More specifically, phi ends up being a series of class and bytecode objects that
are here-linked to each other. We have three ways to get the bytecode:

1. Hand-write using C<bin>
2. Use Perl abstraction to compile it
3. Generate method calls to phi objects to ask them to generate it

Of those options, the latter gives us the most reusable leverage. So we need to
hand-write enough stuff to get phi objects that can compile other phi objects.
...and that, of course, means that we need to specify what phi is compiling.

Before we get there, though, we need to build up a world that's expressive
enough to make this not entirely miserable.


=head3 General object-management stuff
The boring details like C<to_string> and C<clone> that are normally factored
into base classes. This is all minimal because we're hand-coding these methods
where they exist (normally a lot of this would be generated by metaclasses).
=cut

use phi::protocol clone =>
  qw/ clone /;

use phi::protocol stringable =>
  qw/ to_s /;

use phi::protocol joinable =>
  qw/ + /;

use phi::protocol eq =>
  qw/ == /;


=head3 Interpreter protocol
We need this defined up front because it gives us heap allocation, which is
required for basically everything else. It also gives us some useful diagnostic
methods like C<print_string> and C<pnl> ("print with newline"). C<assert> is
used by unit tests and has signature C<< (cond message) -> ()|die >>.

The interpreter provides a mutable map of globals that we can use to name stuff
we generate at bootup. This is convenient because not all values exist within
phi0; sometimes we'll want to use phi1's constructor machinery to get to an
endpoint rather than trying prop stuff up in phi0.
=cut

use phi::protocol interpreter =>
  qw/ heap_allocate
      map_heap
      heap_usage
      heap_size
      globals
      globals=
      def
      global
      print_char
      print_string
      print_string_fd
      pnl
      pnl_err
      pnl_self
      read
      die
      assert
      exit /;





=head2 Backdoor reflective protocol
Objects need to implement this protocol so we can invoke their methods
symbolically; i.e. without knowing the vtable index of those methods.
=cut

use phi::protocol method_translator =>
  qw/ {} /;



1;
