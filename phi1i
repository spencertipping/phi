#!/usr/bin/env perl

=head1 License
    phi programming language
    Copyright (C) 2018  Spencer Tipping

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.


=head1 phi hacky bytecode interpreter
Is this code almost entirely duplicated from L<phi0.pl>? Absolutely. Should I
refactor phi0 to use this instead? Probably. But for now it's separate because
phi0 outputs a bunch of debugging info and I don't really want to think about
how to nondestructively export that from here, given that this is more transient
interpreter.
=cut

package phi;

use v5.14;          # required for pack() endian modifiers, // operator
use strict;
use warnings;

no warnings 'void';

BEGIN
{
  push @INC, $0 =~ s/\/[^\/]+$//r;
}


use constant DEBUG_TRACE_INSNS     => 0;
use constant DEBUG_ILLEGAL_INSNS   => 1;
use constant DEBUG_MISSING_METHODS => 1;

use phi0::image;                # perl -> phi memory allocations
use phi0::interpreter;
use phi0::oop;                  # perl -> phi classes

use phi1back::protocols;
use phi1front::protocols;

use phi1back::bytestring;
use phi1back::interpreter;
use phi1back::list;
use phi1back::map;
use phi1back::stringbuffer;

use phi1front::parsers;

use phi1back::bytecode;
use phi1back::asm;
use phi1back::struct;           # phi1 -> phi1 data layout
use phi1back::oop;              # phi1 -> phi1 classes

use phi1back::reflection;       # NB: this always comes last

use phi0::genelf;

allocate_interpreter(heap);
allocate_machine_bootcode(heap);


# Load up the initial bytecode and generate a tempfile to execute it.
my $bytecode = join '', <ARGV>;
my $tempfile = "/tmp/phi1-$ENV{USER}-$$";

open my $fh, "> $tempfile"
  or die "failed to open $tempfile for writing: $!";
print $fh genelf $bytecode;
close $fh;
chmod 0755, $tempfile;

my $exit_code = system "/bin/bash -c 'time $tempfile'";
unlink $tempfile;
exit $exit_code;
