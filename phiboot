#!/usr/bin/env perl

=head1 License
    phi programming language
    Copyright (C) 2018  Spencer Tipping

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.


=head1 phi boot image generator
This script emits a Linux/AMD64 machine code image and runs it. We aren't linked
to any libraries (including libc), so everything bottoms out in terms of system
calls and we aren't at all portable to other POSIX systems. This is an OK place
to start the world; later on we can specify how to build a C+JIT system that
interfaces to system functions using the standard C calling convention. The
image can then port itself to this backend.

Not all backends are low-level; we just start there because it's conveniently
minimalistic. phi can also recompile itself to languages like Javascript,
Python, Ruby, Perl, OCaml, Java, etc, each of which provides some form of GC and
OOP. phi is set up to delegate to hosting facilities when they're available.
(Optimizing effectively for each backend is another story that I'll address
within the phi codegen libraries.)


=head2 How we're building this image
The simplest strategy is to start with Perl objects and then have each one mark
itself into the initial "heap", which in this case is just the ELF image.
Addresses are absolute and some references are circular, so there's a bit of
trickery involved to get the initial stuff set up correctly. Let's talk a little
about what our boot image is made of.

Ultimately we want to build up to a set of primitive machine code fragments that
can be strung together using C<cons> or other combination primitives, along with
a parser that puts them together by reading code from stdin. These fragments,
and really every piece of memory we allocate here, all need to be self-aware
objects because the garbage collector will likely end up relocating them. This
means they need vtables.

Ideally our image ends up being portable, meaning it can port itself to
different execution environments (some of which aren't AMD64 machine code). We
don't necessarily need each code fragment to specify each backend
implementation, but we do need some sort of semantic awareness at the fragment
level.

Basically, we need a FORTH that provides a Smalltalk-style object layer. Since
this requires garbage collection, we get a free promotion from FORTH to Joy --
but the internals still look a lot like stuff we'd do in FORTH.


=head3 vtables
Let's start here. vtables are the compiled form of classes, and they specify the
implementation of numerically-defined methods against objects. So an object
looks like this:

  <8-byte vtable pointer> <instance data>

...and the vtable looks like this:

                                      object vtable pointers refer here,
                                      not to the beginning of the vtable object
                                      |
                                      V
  <8-byte vtable pointer> <class> <n> <codeptr1> <codeptr2> ... <codeptrN>

This supports our calling convention: we can call-indirect into any C<codeptr>
with the receiver on the data stack.


=head3 Calling convention
I enumerated some possibilities for this in L<dev/e8.md>, but let's commit to
one:

  movq *%rsi, %rax                      # peek, don't pop
  movq *%rax, %rdx                      # load vtable
  call *(%rdx + 8*methodindex)          # call method

NB: we're not committing to the contents of C<%rax> or C<%rdx>; these are
scratch registers. Method implementations should use the data stack and
shouldn't assume anything about non-essential register contents.


=head3 Code objects
If vtables point to machine code, how do we recompile a method? Machine code is
basically opaque from a parsing point of view (as it should be; I don't really
want to get into the CPU emulation market).

Well, just like we do with vtables, code pointers refer to an offset within each
object:

  vtable pointers refer to this offset,
  not to the beginning of the code fragment
                                          |
                                          V
  <8-byte vtable pointer> <source> <size> <code...>

The object itself contains a pointer to a C<source> object, which is a semantic
description of what the code does. More specifically, C<source> points to a list
of backend-neutral instructions; it's enough information to fully reproduce the
compiled code object (possibly in another backend).


=head3 Instructions and cons cells
phi's compiler consumes instruction lists and produces machine code fragments.
This is a fairly straightforward process because phi is concatenative: for the
most part, C<compile([x y ...]) == compile([x]) ++ compile([y]) ++ ...>.

Neither instructions nor cons cells have any intrinsic awareness of how they
would be represented in any given backend. The purpose of cons cells and
instruction objects is strictly to _describe_ a computation, not specify how it
should happen.




=cut


use strict;
use warnings;


=head2 ELF assembly
The final step.
=cut

my $ehdr = pack 'C16 SSL QQQ LSS SSSS',
  0x7f, ord 'E', ord 'L', ord 'F',
  2, 1, 1, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,

  2,                                    # e_type    = ET_EXEC
  62,                                   # e_machine = EM_X86_64
  1,                                    # e_version = EV_CURRENT

  0x400078,                             # e_entry
  64,                                   # e_phoff
  0,                                    # e_shoff
  0,                                    # e_flags

  64,                                   # e_ehsize
  56,                                   # e_phentsize
  1,                                    # e_phnum

  0,                                    # e_shentsize
  0,                                    # e_shnum
  0;                                    # e_shstrndx

my $phdr = pack 'LLQQQQQQ',
  1,                                    # p_type = PT_LOAD
  7,                                    # p_flags = R|W|X (important)
  0,                                    # p_offset (must be page-aligned)
  0x400000,                             # p_vaddr
  0,                                    # p_paddr
  0x1000,                               # p_filesz
  0x1000,                               # p_memsz
  0x1000;                               # p_align

my $code = "\xe9" . pack l => -5;

open my $fh, "> phi";
print $fh join"", $ehdr, $phdr, $code;
close $fh;

chmod 0700, "phi";

exec "./phi";
