#!/usr/bin/env perl

=head1 License
    phi programming language
    Copyright (C) 2018  Spencer Tipping

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.


=head1 phi boot image generator
This script emits a Linux/AMD64 machine code image and runs it. We aren't linked
to any libraries (including libc), so everything bottoms out in terms of system
calls and we aren't at all portable to other POSIX systems. This is an OK place
to start the world; later on we can specify how to build a C+JIT system that
interfaces to system functions using the standard C calling convention. The
image can then port itself to this backend.

Not all backends are low-level; we just start there because it's conveniently
minimalistic. phi can also recompile itself to languages like Javascript,
Python, Ruby, Perl, OCaml, Java, etc, each of which provides some form of GC and
OOP. phi is set up to delegate to hosting facilities when they're available.
(Optimizing effectively for each backend is another story that I'll address
within the phi codegen libraries.)


=head2 How we're building this image
The simplest strategy is to start with Perl objects and then have each one mark
itself into the initial "heap", which in this case is just the ELF image.
Addresses are absolute and some references are circular, so there's a bit of
trickery involved to get the initial stuff set up correctly. Let's talk a little
about what our boot image is made of.

Ultimately we want to build up to a set of primitive machine code fragments that
can be strung together using C<cons> or other combination primitives, along with
a parser that puts them together by reading code from stdin. These fragments,
and really every piece of memory we allocate here, all need to be self-aware
objects because the garbage collector will likely end up relocating them. This
means they need vtables.

Ideally our image ends up being portable, meaning it can port itself to
different execution environments (some of which aren't AMD64 machine code). We
don't necessarily need each code fragment to specify each backend
implementation, but we do need some sort of semantic awareness at the fragment
level.

Basically, we need a FORTH that provides a Smalltalk-style object layer. Since
this requires garbage collection, we get a free promotion from FORTH to Joy --
but the internals still look a lot like stuff we'd do in FORTH.
=cut

package phi;

use v5.14;          # required for pack() endian modifiers, // operator
use strict;
use warnings;

no warnings 'void';


=head2 Writing machine code
The Intel guys didn't make things easy. Instructions are a mixture of hex and
octal, and at irregular locations. I'm going to write a little function to take
mixed hex/octal and pack it into a binary string, for instance:

  b"4831o300"

You can also specify percent-prefixed C<pack> things for extra args:

  b"48b8 %Q<", $x

You can use ni and ndisasm to check commands:

  $ sudo apt install nasm
  $ ni pRphiboot 1p'wp "a*" => phi::b "4831 o300"' e[ndisasm -b 64 -]
  00000000  4831C0            xor rax,rax

=cut

sub b
{
  my ($format, @args) = @_;
  join"", map s/^%// ? pack($_, shift @args // die "b($format): too few args")
                     : map(pack(C => $_),
                           map s/^o// ? oct : hex, /o[0-7]{3}|[0-9a-fA-F]{2}/g),
              split /(%\w[<>]?)/, $format;
}


=head2 Heap simulator
We're generating the image by allocating stuff into the initial memory-mapped
heap, so let's define a heap object that manages some of the bookkeeping for us.
=cut

package phi::heap
{
  use overload qw/ << allocate /;

  sub new
  {
    my ($class, $initial_address) = @_;
    bless { allocations => [],
            offset      => $initial_address // die "no initial heap address" },
          $class;
  }

  sub allocate
  {
    use bytes;
    my ($self, $x) = @_;
    my $location = $$self{offset};
    push @{$$self{allocations}}, $x;
    $$self{offset} += length $x;
    $location;
  }

  sub image
  {
    use bytes;
    join"", @{shift->{allocations}};
  }

  sub size
  {
    my ($self, $size) = ($_[0], 0);
    $size += length for @{$$self{allocations}};
    $size;
  }
}


use constant the_heap => phi::heap->new(0x400000);


=head3 ELF header
These behave like heap allocations because of page alignment. Basically, let's
say our virtual address space starts at 0x400000; because the ELF file is
memory-mapped rather than copied, we have the constraint that we can "move" the
file's contents only by increments of 4096 bytes -- whole pages. We can't assign
an arbitrary offset, e.g. to skip the ELF header.

This isn't much of a problem really. As far as phi is concerned, our initial
heap is maybe 120 bytes smaller than it would normally be because it's got some
mystery data (the ELF headers) prepended; then that will get garbage collected
because nothing refers into it. So the net impact of our ELF headers ends up
being zero, exactly what we want.
=cut

the_heap << pack 'C16 SSL QQQ LSS SSSS',
  0x7f, ord 'E', ord 'L', ord 'F',
  2, 1, 1, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,

  2,                                    # e_type    = ET_EXEC
  62,                                   # e_machine = EM_X86_64
  1,                                    # e_version = EV_CURRENT

  0x400078,                             # e_entry
  64,                                   # e_phoff
  0,                                    # e_shoff
  0,                                    # e_flags

  64,                                   # e_ehsize
  56,                                   # e_phentsize
  1,                                    # e_phnum

  0,                                    # e_shentsize
  0,                                    # e_shnum
  0;                                    # e_shstrndx

the_heap << pack 'LLQQQQQQ',
  1,                                    # p_type = PT_LOAD
  7,                                    # p_flags = R|W|X (important)
  0,                                    # p_offset (must be page-aligned)
  0x400000,                             # p_vaddr
  0,                                    # p_paddr
  0x1000,                               # p_filesz
  0x1000,                               # p_memsz
  0x1000;                               # p_align


# FIXME: test code
the_heap << b"e9%l<", -5;


=head2 vtables
Let's start here. vtables are the compiled form of classes, and they specify the
implementation of numerically-defined methods against objects. So an object
looks like this:

  <8-byte vtable pointer> <instance data>

...and the vtable looks like this:

     object vtable pointers refer here,
     not to the beginning of the vtable object
                                             |
                                             V
  <8-byte vtable pointer> <class> <n> <here> <codeptr1> ... <codeptrN>

This supports our calling convention: we can call-indirect into any C<codeptr>
with the receiver on the data stack.

vtables bottom out in the self-referential "vtable" vtable:

            +---------------------+
            |                     |
            |                     V
  <vtable ptr> <class> <n> <here> <code1> <code2> ... <codeN>

This makes C<vtable> an instance of itself.


=head3 Something awful
In machine code, 8-bit displacement quantities are signed integers. This means
we can address 128/8 = 16 distinct method offsets before we have to bump it up
to a 32-bit displacement. This, of course, is tremendously lame: why waste the
top bit? Here's how we can save it.

Right now our vtables point to the very first code pointer, but any protocol
will know the maximum method index it refers to. The method offsets are
hard-coded constants, so they don't have to be evenly spaced. This means we can
break up the method table like this:

                                     vtable pointer to here
                                     |
                                     V
  <code1> <code2> ... <codeK> <here> <codeK+1> ... <codeN>

Then the class can generate offsets to skip around the C<here> marker, many of
which will be negative. This gives us an effective disp8 address space of 31
methods rather than the 16 we currently have. (Just 31 because the C<here>
marker eats into some of the space.)

I'm not going to implement this off the bat, but it's a potentially nice
optimization if code size becomes an issue.
=cut

# TODO


=head2 Structs and classes
In phi terminology, "struct" refers to the physical layout of an object whereas
"class" refers to the object's protocol. The distinction here is that a class
_can_ use a struct as a storage backend, but doesn't necessarily have to (and in
languages that provide classes, there would be no sense in doing so).

Structs aren't always straightforward: we can have variable-length sections
within a single value, as we do with vtables and code fragments. We have to
commit to some length at allocation time, so an _instance_ of a struct has fixed
size, but the struct itself need not commit to any size for all instances.

Both structs and classes are "source" objects -- they aren't directly runnable,
but they can produce runnable things (vtables and code fragments if we're
targeting machine code). Let's get into how they're stored.


=head3 Structs in detail
Just like in C, a struct converts between a structured representation and a flat
binary layout. Conceptually this is simple; we can do it with this API:

  struct.offset("field") -> integer     # NB: this API is insufficient
  struct.sizeof("field") -> integer
  struct.marker()        -> code(struct* -> struct'*)

The challenge comes in when we have variable-offset fields. For example, suppose
we have a struct with two variable-length sections:

  struct key_value_pair
  {
    size_t key_size;
    size_t value_size;
    char   key[key_size];               # not valid C, but this is what we mean
    char   value[value_size];
  }

C can't encode this struct because it doesn't have a fixed size and C<value> has
a computed offset within it -- so C<&kv.value> isn't well-defined. But in
principle nothing stops phi from supporting this type of thing. We just need to
modify the struct API:

  struct.reader("field") -> code(struct* -> val)
  struct.writer("field") -> code((struct*, val) -> struct*)
  struct.marker()        -> code(struct* -> struct'*)

NB: pointer size/format/etc is determined by meta-structs, explained more below.

This new API has a couple of advantages:

1. It's more semantically correct: structs own storage, not just layout
2. We can introduce write barriers, which makes generational GC possible

More on this in the meta-struct section, because it's cooler than it sounds.


=head3 Primitives and pointers, philosophically speaking
Things like C<int32_t> aren't structs per se: they aren't aggregates of other
values. Let's get philosophical about what exactly C<int32_t>, C<char*>, and
C<myclass*> mean.

=head4 C<char*>
If I hand you something and tell you it's a C<char*>, you know a few things:

1. It's the size of any other pointer
2. You can dereference it and get a C<char> value
3. It points into mapped memory (let's assume)
4. The C<char> value has an identity specified by its location
5. The C<char> value doesn't itself refer to anything

(4) is important: if you copy the C<char> into a local variable, you won't catch
updates made by anyone else who has the pointer. So, perhaps counterintuitively,
C<*(&char) != char> from a semantic perspective.

=head4 C<int32_t>
If I tell you C<x> is an C<int32_t>, you also know a few things:

1. It's 32 bits
2. Those 32 bits should be interpreted as a signed native-endian integer
3. It's a value: it doesn't have any intrinsic identity
4. It doesn't point to anything, so it returns itself when GC-marked

(4) is implied by (3).

Technically endianness isn't specified with integer types, but doing anything
other than native would create a big performance hit for no particularly good
reason.

=head4 C<myclass*>
Let's suppose C<myclass> is a polymorphic base with multiple concrete
alternatives. Then we know:

1. We can interpret the pointer destination as a fixed struct to get a vtable
2. The referent doesn't have a fixed size
3. The referent may refer to other values, so GC should ask it to mark itself
4. We can call methods on the B<pointer>; the referent is structurally opaque
5. We can call any method specified by C<myclass>

(1), (4), and (5) collectively imply that we have some consistent calling
convention for polymorphic pointer-referenced objects. That is, the objects have
a monomorphic element to them despite being generally polymorphic. This is kind
of obvious, but I'm calling it out here because phi draws some lines differently
from languages like Java that completely hide the implementation from you. In
particular, you can create your own polymorphism-negotiation strategies and
pointer types. This makes it possible to implement stuff like xor-linked lists
and C<here> pointers in a garbage-collected environment.


=head3 Classes in detail
Here's the instance state for a class:

  struct                       data;
  unordered_map <symbol, code> methods;
  set           <protocol>     protocols;

NB: C<data> dictates where the vtable is stored; this ultimately determines the
calling convention for backends that don't provide one. Classes themselves don't
dictate the method calling convention.

Class objects provide just two methods:

  class.vtable() -> vtable*
  class.resolve(symbol method) -> code

Method resolution is managed by protocols:

  protocol.resolve(symbol method) -> int32

NB: you don't have to follow any specific convention for receiver addressing,
but it's common to have the top stack element be a pointer to the receiver.


=head3 Pointers, in practice
C has just one kind of pointer: the contract is that if you have a value of type
C<X*>, you can use the C<*> operator on it to get an lvalue of type C<X>.

Consider, though, how we would encode a C<here> pointer in C. We could use
C<void*>, but from a type perspective we have no indication that this is a
C<here> pointer at all. The only reason this works at all in C is that objects
don't move; but suppose they did. Then we'd need some pointer-level
polymorphism. We can get that in C++:

  template <class inner>
  struct pointer<inner>
  {
    inner* ref;
    inner*         deref() const { return ref; }
    pointer<inner> mark()        { return ref->mark(); }
  }

  template <class outer, class inner>
  struct here_pointer<outer, inner>
  {
    char* ptr;      // type doesn't matter; we just need sizeof() == 1
    inner* deref() const { return (inner*) ptr; }

    here_pointer<outer, inner> mark()
    {
      uint16_t  offset = ((uint16_t*) ptr)[-1];
      outer    *self   = (outer*) (ptr - offset);

      // NB: the offset is an intrinsic part of the here_pointer, so we need to
      // preserve it across GC
      return here_pointer((inner*) ((char*) ref->mark()->ptr + offset));
    }
  }

Note the lack of virtual methods here; most of the time phi treats pointers
monomorphically, just as C++ would if we used the classes above. When you want
polymorphism, you would have what amounts to a protocol-dispatch pointer:

  template <class T>
  struct polymorphic_pointer<T>
  {
    T* ptr;
    vtable<T>* vtable() const { return *((vtable<T>**) ptr); }
  }

The C<vtable()> method is where we encode the assumption that instances of C<T>
begin with a vtable pointer. There's no reason this needs to be true, though; we
could just as easily define a scheme where the vtable is an indirect int into a
class array, or located after the first eight bytes, or what have you. The only
real requirement is that anyone looking at the pointer be able to find the
vtable in some consistent way. This degree of consistency is the method-calling
convention.


=head3 Primitives, in practice
Primitives are often non-pointer values, e.g. C<int64>, C<double>. This is easy
to work with when they're referred to from within a structure; the GC will be
driven by type-aware C<mark()> methods.

The stack, on the other hand, is dynamically typed, so the GC won't know
how/when to mark things. We have a few options:

1. Use 128-bit (or >64-bit) stack entries by prepending a marker to each one
2. Convert things to use stack frames, and prepend those with markers
3. Use some type of pointer tagging (I don't like this)

Of these, (1) is the simplest option that doesn't involve float/int64 boxing. It
adds two operations to a push and one to a pop:

  # push %rax (original)                # push %rax (new)
  movq %rax, *(%rsi)                    movq %rax, *(%rsi)
  subq $8, %rsi                         subq $16, %rsi
                                        xorq %rax, %rax
                                        movq %rax, *(%rsi + 8)

  # pop into %rax (original)            # pop into %rax (new)
  lodsq                                 lodsq
                                        lodsq

There's no particular reason we need to use a full 8-byte marker per entry; in
all likelihood a single byte would suffice. (How many kinds of pointers are
there, really?) Then we'd have nine-byte stack entries like this:

  # push %rax                           # pop into %rax
  movq %rax, *(%rsi)                    lodsb
  subq $9, %rsi                         lodsq
  xorb %al, %al
  movb %al, *(%rsi + 1)

In addition to saving runtime space, we also save a few bytes of code size:
C<lodsb> is one byte smaller than C<lodsq>, and C<xorb> and C<movb> both lack
the one-byte REX.W prefix.


=head3 Meta-structs, classes, and idiomatic backend integration
C<struct> is a protocol whose instances are called "meta-structs" -- this is
where we get things like vtable placement logic, padding for GC overhead, etc.
Some structs are backend-specific; for instance, C<perl_hash_struct> uses Perl
code to implement phi structs. This brings us to a new problem: what happens to
things like C<here> pointers of sub-structures in a world without flat memory
layout? Before I get into the specifics, I want to talk about a related problem:
idiomatic representation of things.

If we're targeting Javascript, we don't want to reduce things like strings to
flat byte arrays even if we have the machinery to do it. Instead, we want to use
the C<String> class when possible simply because it opens the door to seamless
integration with existing libraries. C<String> is idiomatic, so we prefer it.

Idioms vary a lot between languages and phi is in the relatively unenviable
position of bridging that gap. We do this with classes that are monomorphically
included as struct elements. Some of these classes are deliverately vague about
their underlying representation; these will become idiomatic quantities, much in
the way that Thrift/ProtoBuf schemas turn into idiomatic things. Other classes
are very specific and will fail to compile (or use strange implementations) on
backends that don't support them.

Putting this differently, phi lets you do what you probably want to do in every
language: you can write functions that generate and compile structs and classes,
and you can front-load the performance impact of doing this.
=cut

# TODO


=head2 Compiled code objects
If vtables point to machine code, how do we recompile a method? Machine code is
basically opaque from a parsing point of view (as it should be; I don't really
want to get into the CPU emulation market).

Well, just like we do with vtables, code pointers refer to an offset within each
object:

            vtable pointers refer to this offset,
            not to the beginning of the code fragment object
                                                           |
                                                           V
  <8-byte vtable pointer> <source> <linkage> <size> <here> <code...>

NB: C<here> is something you'll see anytime we have pointers to the middle of a
structure. It's an unsigned two-byte int that specify how far into the struct
you are, which makes it possible to have middle-pointers into polymorphic
objects. The contract is that C<< &(struct.here) - &struct == struct.here >>;
that is, its value is its offset.

Q: how do we simulate C<here> in other backends? Probably store a compound
pointer: C<(object, index)> that we use with a helper method to dereference. So
inner pointers work like arrays, basically. (Either that, or we box up the
inline area and give it a pointer outwards to the container object if we need
one. This should be fine unless the backend is reference-counted, at which point
the outer-pointer will need to be weakened or something.)

The object itself contains a pointer to a C<source> object, which is a semantic
description of what the code does. More specifically, C<source> points to a list
of backend-neutral instructions; it's enough information to fully reproduce the
compiled code object (possibly in another backend).

C<linkage> points to an object that describes the location of any absolute
references within C<code>; we need this so we can quickly rewrite those
addresses when we GC-mark and move the code fragment.

NB: code fragments almost always end in C<c3>, which is a C<ret> instruction.
This byte is omitted when we inline a fragment.
=cut

# TODO


=head2 Method calling convention
I enumerated some possibilities for this in L<dev/e8.md>, but let's commit to
one:

  movq *%rsi, %rax                      # peek, don't pop
  movq *%rax, %rcx                      # load vtable
  call *(%rcx + 8*methodindex)          # call method

NB: we're not committing to the contents of C<%rax> or C<%rcx>; these are
scratch registers. Method implementations should use the data stack and
shouldn't assume anything about non-essential register contents.
=cut

sub mi($)
{
  # Call method at specified index (returns machine code)
  my $mi = 8 * shift;
  $mi < 128                             # NB: disp8 is signed
    ? b"488bo006 488bo010 ffo121 %c", $mi
    : b"488bo006 488bo010 ffo221 %l<", $mi;
}


=head2 Instructions and lists
phi's compiler consumes instruction lists and produces machine code fragments.
This is a fairly straightforward process because phi is concatenative: for the
most part, C<compile([x y ...]) == compile([x]) ++ compile([y]) ++ ...>.

Neither instructions nor cons cells have any intrinsic awareness of how they
would be represented in any given backend. The purpose of cons cells and
instruction objects is strictly to _describe_ a computation, not specify how it
should happen.

We can evaluate (not just compile) a list by pushing all of the tail elements
onto the return stack and returning normally:

  [f1 f2 f3].eval() -> push $f3; push $f2; push $f1; ret

This is nice because it means we don't hold a reference to the list object even
while we're evaluating it.

We don't always have direct access to the return stack, for instance in most
hosted environments. In those cases we can just run a normal loop.
=cut

# TODO


=head2 Classes and protocols
In a world with only classes, we'd need to allocate a separate vtable index for
every single method, which would take up a lot of space:

  # the world without protocols: every class contains four vtable entries
  class A {
    method foo;     # vtable index 0
    method bar;     # vtable index 1
  }
  class B {
    method foo;     # vtable index 0
    _               # vtable index 1 is blank to avoid A::bar conflict
    method bif;     # vtable index 2
    method baz;     # vtable index 3
  }

This is equivalent to every class belonging to a single protocol that contains
the union of everyone's methods.

We can fix this by specifying which classes are eligible for which virtual
method calls, in this case by adding them to a protocol object:

  protocol has_foo {
    method foo;     # same vtable index within all member classes
  }
  class A : has_foo {
    method foo;     # vtable index 0
    method bar;     # vtable index 1
  }
  class B : has_foo {
    method foo;     # vtable index 0
    method bif;     # vtable index 1 (no collision with A::bar)
    method baz;     # vtable index 2
  }

This is basically how method resolution works in statically-typed languages like
Java or C++; phi also uses static typing when it comes to classes/methods, it
just has more support for runtime code generation.

Every virtual method invocation, then, addresses a protocol rather than a class.
Any class-focused method invocations are static function calls and are likely to
be inlined during compilation.

NB: we can't modify vtables once they're allocated, so compiled classes,
vtables, and dynamic method calls are all immutable once you start using them.
It's theoretically possible to enumerate heap objects and rewrite their vtables
if all you're doing is adding new methods to things, but that's a library thing
instead of something built into the object system.
=cut

# TODO: implement stuff


=head2 Build the image
This is pretty simple: we just write the entire heap contents into a file and
call it a day. This works because the heap begins with ELF header allocations
that locate it properly in memory.
=cut

open my $fh, "> phi";
print $fh the_heap->image;
close $fh;

chmod 0700, "phi";
