# Infix bootstrap layer
# phifront defines a minimalistic infix language, but it isn't especially
# usable. Two features in particular are suboptimal:
#
# 1. Functions are stack->stack, but provide no destructuring
# 2. Evaluation is horrifically slow
#
# Let's solve (1) first. The basic idea is to define a series of structural
# parsers that destructure data-stack lists and bind locals in the process. To
# make this simple, we diverge from Haskell _and our bootstrap syntax_ by
# defining \x y z -> ... to mean "bind three stack items", not "make a curried
# function." We have to do this; otherwise we have asymmetry around list/stack
# destructuring.

# Phi boot macros
# We don't have these anymore, so let's implement new ones here.

\lit  = \x -> [[x], 6, [2, 0], 7] in
\dup  = [[0, 0],    7] in
\drop = [[1],       7] in
\swap = [[2, 1, 0], 7] in

\head = [6, [2, 0], 7] in
\tail = [6, [2, 1], 7] in

\isget = \i -> [head, 2, lit i, 2, !!philist::lget, 2] in
\isset = \i -> [dup, 2, head, 2, [3, 2, 0, 1], 7, lit i, 2, !!philist::lset,
                2, lit 0, 2, !!philist::lset, 2] in

# Parse state
# This is like a string parse state but simpler; we just have two fields, value
# and list node.

\list_parse_state_type =
  (!!phiobj::make_type [['value      :: isget 0,
                         'list       :: isget 1,
                         'with_value :: isset 0,
                         'with_list  :: isset 1,
                         'is_error   :: [drop, 2, lit 0, 2]]])#h in

\cons_parser_type =
  (!!phiobj::make_type
    [['hp    :: isget 0,
      'tp    :: isget 1,
      'parse :: (\stack ->
        \self  = stack#h in
        \state = stack#t#h in
        (([3, lit 'cons, 2, 39] [state.list()])#h     # is it a cons?
           ? (\hstate = self.hp().parse(state.with_list(state.list()#h)) in
              hstate.is_error()
                ? !!phiparse::failure
                : (\tstate = self.tp().parse(state.with_list(state.list()#t)) in
                   tstate.is_error()
                     ? !!phiparse::failure
                     : state.with_value(hstate.value() :: tstate.value())))
           : !!phiparse::failure) :: stack#t#t)]])#h in

\id_parser_type =
  (!!phiobj::make_type
    [['parse :: (\stack ->
        \self  = stack#h in
        \state = stack#t#h in
        state.with_value(state.list()) :: stack#t#t)]])#h in

\id_parser = [] :: id_parser_type in
\cons_parser = [id_parser, id_parser] :: cons_parser_type in
cons_parser.parse(['initval, ['x, 'y]] :: list_parse_state_type).value()
