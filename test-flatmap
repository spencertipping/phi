#!/usr/bin/env perl
package phi;

use strict;
use warnings;

no warnings 'precedence';

use Carp;
use Data::Dumper;

$Data::Dumper::Indent = 0;

use phi::boot;

use editor ();

BEGIN
{
  $SIG{__DIE__} = sub { system 'stty sane'; print Carp::longmess(@_);
                        system 'reset' };
}
# Editor setup
use constant e => phi::editor::buffer->new(<<'EOF');
# Here's a parse continuation:
(x.foo y.bar).#equals(x);
#(5.foo 10.bar)
EOF

use constant c => phi::editor::cursor->new(e);


use Time::HiRes qw/time/;
use JSON;
use constant je => JSON->new->allow_nonref(1)->convert_blessed(1);


use List::Util qw/min/;

system 'stty raw; stty -echo isig -ignbrk -brkint -ixon -ixoff';

my $ibuf = '';
while (read STDIN, $ibuf, 1, length $ibuf)
{
  $ibuf = substr $ibuf, 1 if $ibuf =~ /^\033/ && length $ibuf > 4;

  my $orig_pos = c->pos;
  my $change = 0;

  c->col(0)  while $ibuf =~ s/^\033\[7~//;
  c->col(-1) while $ibuf =~ s/^\033\[8~//;
  c->move($1 eq 'A' ? -1 : $1 eq 'B' ? 1 : 0,
          $1 eq 'D' ? -1 : $1 eq 'C' ? 1 : 0)
    while $ibuf =~ s/^\033\[([ABCD])//;

  c->backspace(c->col || 1), $change = 1 while $ibuf =~ s/^\x15//;
  c->backspace,              $change = 1 while $ibuf =~ s/^\x7f//;
  c->delete,                 $change = 1 while $ibuf =~ s/^\033\[3~//;

  c->insert("  "), $change = 1 while $ibuf =~ s/^\t//;
  c->insert("\n"), $change = 1 while $ibuf =~ s/^\r//;
  c->insert($1),   $change = 1 while $ibuf =~ s/^([^\033\x7f\x15]+)//;

  my $pos         = c->pos;
  my ($row, $col) = c->rowcol;

  print "\033[H\033[J";

  for my $l (0..e->lines + 2)
  {
    my $r = $l + 1;
    print "\033[$r;1H\033[K\033[0;0m" . (e->line($l) // '');
  }

  my $last_r  = e->lines + 1;

  if ($change)
  {
    my $error   = undef;
    my $plength = 0;
    my $explain =
      eval
      {
        local $SIG{__DIE__} = sub {
          print STDERR "\n\n\n\n\n" . Carp::longmess(@_) =~ s/\n/\r\n/gr;
        };
        my ($ok, $l, $x) = phi::boot::boot_scope->parse(e, 0);
        $x->can('explain')
          ? $x->explain
          : Dumper("ok = $ok", $x) =~ s/\n/\r\n/gr;
      } // $@;

    {
      no warnings 'uninitialized';
      print "\033[$last_r;1H\033[K\033[0;37m$plength -> $explain";
      ++$last_r;
      #print "\033[$last_r;1H\033[K\033[0;37m" . Dumper($error);
    }
  }

  my ($r, $c) = c->rowcol;
  $r++;
  $c++;
  print "\033[$r;${c}H";
}

system 'reset';
