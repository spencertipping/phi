#!/usr/bin/env perl
use strict;
use warnings;

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

$|++;

use phiboot;
use phibootmacros;
use phibinary;
use philist;
use phiparse;
use phiobj;
use philang;
use phiops;
use phifront;

use List::Util;
use Time::HiRes qw/time/;

sub native_eval
{
  mkdir "test/images";
  open my $fh, "> /tmp/$ENV{USER}-phi-image"
    or die "failed to create test image file: $!";
  print $fh export(shift);
  close $fh;

  die if system "make >/dev/null";
  join"", `cat /tmp/$ENV{USER}-phi-image | ocaml unix.cma phi.ml`;
}

sub native_test($$)
{
  print ".";
  my ($expected, $l) = @_;
  my $got = native_eval $l;
  $got eq $expected
    or die "FAIL $l: expected [$expected], got [$got]";
}

native_test "(0 :: nil)", l l(0), i_print;
native_test "1", l l(1), head, i_print;
native_test "1", l lit 1, i_quote, head, head, i_print;
native_test "(2 :: nil)", l l(l(l(2), i_print)), i_cset, i_crash;
native_test "3", l l(1, 2), i_dset, i_plus, i_print;

native_test "3", l lit 1, lit 2, lit 3, stack(2, 0), i_print;
native_test "2", l lit 1, lit 2, lit 3, stack(2, 1), i_print;
native_test "2", l lit 1, l(lit 2), l(lit 3), if_, i_print;
native_test "3", l lit 0, l(lit 2), l(lit 3), if_, i_print;

native_test "'nil", l pnil, i_type, i_print;
native_test "1", l lit"foo", lit"foo", i_symeq, i_print;
native_test "1", l pnil, nilp, i_print;
native_test "0", l l(1), nilp, i_print;

use phitype test_type =>
  bind(return_something => drop, lit"foo");

native_test "'foo", l pcons(pnil, test_type), mcall"return_something", i_print;

print "\n";
