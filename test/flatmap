#!/usr/bin/env perl
package phi;

use strict;
use warnings;

no warnings 'precedence';

use Carp;

BEGIN
{
  $SIG{__DIE__} = sub { system 'stty sane'; Carp::confess(@_); system 'reset' };
  require 'parser.pm';
  require 'parsestr.pm';
  require 'parseapi.pm';
  require 'editor.pm';
  require 'phigrammar.pm';
}


# Editor setup
use constant e => phi::editor::buffer->new(<<'EOF');
# phi grammar test?
"foo":"newkeyword rcolor rc4 v" | "bar" >>= fooabc
EOF

use constant c => phi::editor::cursor->new(e);


use Time::HiRes qw/time/;
use JSON;
use constant je => JSON->new->allow_nonref(1)->convert_blessed(1);

use List::Util qw/min/;

system 'stty raw; stty -echo isig -ignbrk -brkint -ixon -ixoff';

my $parsed = phi::grammar::phi_expr->on(e);
my $ibuf = '';
while (read STDIN, $ibuf, 1, length $ibuf)
{
  $ibuf = substr $ibuf, 1 if $ibuf =~ /^\033/ && length $ibuf > 4;

  my $orig_pos = c->pos;

  c->col(0)  while $ibuf =~ s/^\033\[7~//;
  c->col(-1) while $ibuf =~ s/^\033\[8~//;
  c->move($1 eq 'A' ? -1 : $1 eq 'B' ? 1 : 0,
          $1 eq 'D' ? -1 : $1 eq 'C' ? 1 : 0)
    while $ibuf =~ s/^\033\[([ABCD])//;

  my $should_reparse = 0;

  c->backspace(c->col || 1), $should_reparse = 1 while $ibuf =~ s/^\x15//;
  c->backspace             , $should_reparse = 1 while $ibuf =~ s/^\x7f//;
  c->delete                , $should_reparse = 1 while $ibuf =~ s/^\033\[3~//;

  c->insert("  "), $should_reparse = 1 while $ibuf =~ s/^\t//;
  c->insert("\n"), $should_reparse = 1 while $ibuf =~ s/^\r//;
  c->insert($1)  , $should_reparse = 1 while $ibuf =~ s/^([^\033\x7f\x15]+)//;

  my $pos         = c->pos;
  my ($row, $col) = c->rowcol;

  if ($should_reparse)
  {
    for my $l (0..e->lines + 2)
    {
      my $r = $l + 1;
      print "\033[$r;1H\033[K\033[0;0m" . (e->line($l) // '');
    }

    my $last_r = e->lines + 1;
    my $explain =
      eval
      {
        my $t0     = time;
        my $output = $parsed->parse(min($orig_pos, $pos))->val;
        my $dt     = time - $t0;
        my $bytes  = length e->substr(min($orig_pos, $pos), e->length);
        my $mb_s   = $bytes / 1048576 / $dt;

        local $SIG{__DIE__} = '';
        $output->render;
        $output->val->explain;
      } // $@;

    print "\033[$last_r;1H\033[K\033[0;37m$explain";
  }

  my ($r, $c) = c->rowcol;
  $r++;
  $c++;
  print "\033[$r;${c}H";
}

system 'reset';
