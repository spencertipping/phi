#!/usr/bin/env perl
package phi;

use strict;
use warnings;

no warnings 'precedence';

use Carp;

BEGIN
{
  $SIG{__DIE__} = sub { system 'stty sane'; print Carp::longmess(@_);
                        system 'reset' };
}

BEGIN
{
  require 'phicompiler.pm';
  require 'editor.pm';
}


# Editor setup
use constant e => phi::editor::buffer->new(<<'EOF');
# phi grammar test?
grammar = ebnf $ "foo":"k1 rcolor rc4 v";
grammar = ebnf $ grammar | "bar":"k2 rcolor rc5 v";
grammar = ebnf $ (grammar+):"k3 rall vf";
grammar $ foobarfoo;
EOF

use constant c => phi::editor::cursor->new(e);


use Time::HiRes qw/time/;
use JSON;
use constant je => JSON->new->allow_nonref(1)->convert_blessed(1);

use List::Util qw/min/;

system 'stty raw; stty -echo isig -ignbrk -brkint -ixon -ixoff';

my $ibuf = '';
while (read STDIN, $ibuf, 1, length $ibuf)
{
  $ibuf = substr $ibuf, 1 if $ibuf =~ /^\033/ && length $ibuf > 4;

  my $orig_pos = c->pos;

  c->col(0)  while $ibuf =~ s/^\033\[7~//;
  c->col(-1) while $ibuf =~ s/^\033\[8~//;
  c->move($1 eq 'A' ? -1 : $1 eq 'B' ? 1 : 0,
          $1 eq 'D' ? -1 : $1 eq 'C' ? 1 : 0)
    while $ibuf =~ s/^\033\[([ABCD])//;

  c->backspace(c->col || 1) while $ibuf =~ s/^\x15//;
  c->backspace              while $ibuf =~ s/^\x7f//;
  c->delete                 while $ibuf =~ s/^\033\[3~//;

  c->insert("  ") while $ibuf =~ s/^\t//;
  c->insert("\n") while $ibuf =~ s/^\r//;
  c->insert($1)   while $ibuf =~ s/^([^\033\x7f\x15]+)//;

  my $pos         = c->pos;
  my ($row, $col) = c->rowcol;

  print "\033[H\033[J";

  for my $l (0..e->lines + 2)
  {
    my $r = $l + 1;
    print "\033[$r;1H\033[K\033[0;0m" . (e->line($l) // '');
  }

  my $last_r = e->lines + 1;
  my $error  = undef;
  my $plength = 0;
  my $explain =
    eval
    {
      local $SIG{__DIE__} = sub {
        print STDERR Carp::longmess(@_) =~ s/\n/\r\n/gr;
      };
      #my $t0     = time;
      my ($ok, $l, $output) = phi::compiler::block->new->parse(e, 0);
      #my $dt     = time - $t0;
      #my $bytes  = e->length;
      #my $mb_s   = $bytes / 1048576 / $dt;

      $plength = $l;

      $error = $output unless $ok;
      $output->render;
      join ",\r\n", grep defined, @{$output->val};
    } // $@;

  {
    no warnings 'uninitialized';
    print "\033[$last_r;1H\033[K\033[0;37m$plength -> $explain";
    ++$last_r;
    print "\033[$last_r;1H\033[K\033[0;37m$error";
  }

  my ($r, $c) = c->rowcol;
  $r++;
  $c++;
  print "\033[$r;${c}H";
}

system 'reset';
