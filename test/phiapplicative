#!/usr/bin/env perl
use strict;
use warnings;

$|++;

use phiboot;
use phibootmacros;
use phiparse;
use philocal;
use phiapplicative;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

if (0)
{
  print "line_comment rep bug\n";
  use constant input => l(pstr "#foo\n #bar\n", pint 0);

  test input, line_comment, i_eval;
  test input, l(line_comment, any_whitespace), phiparse::seq, i_eval;
  test input, l(line_comment, any_whitespace, line_comment), phiparse::seq, i_eval;

  test input, l(pstr "#", phiparse::str, i_eval), i_eval;
  test input, l(pstr "#", phiparse::str, i_eval), phiparse::rep, i_eval;
  test input, l(pstr "#foo", phiparse::str, i_eval), phiparse::rep, i_eval;
  test input, l(pstr "#foo\n", phiparse::str, i_eval), phiparse::rep, i_eval;

  test input, l(line_comment, i_eval), i_eval;
  test input, l(line_comment, i_eval), phiparse::rep, i_eval;
  test input, line_comment, phiparse::rep, i_eval;
}

print "comment/whitespace\n";
test l(pstr " #foo\n#bar\n", pint 0), ignore, i_eval;

print "listlength\n";
test l(1, 2, 3), phiapplicative::list_length, i_eval;
test pnil,       phiapplicative::list_length, i_eval;
test l('foo'),   phiapplicative::list_length, i_eval;

print "liststring\n";
test l(65, 66, 67), phiapplicative::list_string, i_eval;
test pnil,          phiapplicative::list_string, i_eval;
test l(97),         phiapplicative::list_string, i_eval;

print "symbol_parser\n";
test l(pstr "foo(bar)",     pint 0), phiapplicative::symbol_parser, i_eval;
test l(pstr "foo_bar(bar)", pint 0), phiapplicative::symbol_parser, i_eval;
test l(pstr "(bar)",        pint 0), phiapplicative::symbol_parser, i_eval;
test l(pstr "",             pint 0), phiapplicative::symbol_parser, i_eval;

use constant symbol_and_ws => l
  l(l(phiapplicative::symbol_parser,
      phiapplicative::ignore),
    phiparse::alt, i_eval),
  phiparse::rep, i_eval;

test l(pstr "foo bar",     pint 0), symbol_and_ws, i_eval;

test l(pstr "foo_bar#bar\nbif", pint 0), symbol_and_ws, i_eval;
test l(pstr "(bar)",            pint 0), symbol_and_ws, i_eval;
test l(pstr "",                 pint 0), symbol_and_ws, i_eval;

print "scopesearch\n";
test lit "foo", l(l("foo", 1, 2, 3), l("bar", 8)),
     phiapplicative::scope_search, i_eval;

test lit "foo", l(l("bif", 1, 2, 3), l("bar", 8)),
     phiapplicative::scope_search, i_eval;

test lit "foo", l(l("bif", 1, 2, 3), l("foo", 8)),
     phiapplicative::scope_search, i_eval;

test lit "foo", pnil, phiapplicative::scope_search, i_eval;

print "local_variable\n";
test l(pstr "foo", pint 0, l(pnil, l(l(foo => 1, 2, 3)), pnil)),
     phiapplicative::symbol_parser,  i_eval,
     phiapplicative::local_variable, i_eval;

test l(pstr "foo", pint 0, l(pnil, l(l(bar => 1, 2, 3),
                                     l(foo => 4, 5, 6)), pnil)),
     phiapplicative::symbol_parser,  i_eval,
     phiapplicative::local_variable, i_eval;

test l(pstr "#foo", pint 0, l(pnil, l(l(bar => 1, 2, 3),
                                      l(foo => 4, 5, 6)), pnil)),
     phiapplicative::symbol_parser,  i_eval,
     phiapplicative::local_variable, i_eval;

test l(pstr "foo", pint 0, l(pnil, l(l(bar => 1, 2, 3),
                                     l(bif => 4, 5, 6)), pnil)),
     phiapplicative::symbol_parser,  i_eval,
     phiapplicative::local_variable, i_eval;

test l(pstr "foo", pint 0, l(pnil, pnil, pnil)),
     phiapplicative::symbol_parser,  i_eval,
     phiapplicative::local_variable, i_eval;
