#!/usr/bin/env perl
use strict;
use warnings;

no warnings 'recursion';

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

use phiboot;
use phibootmacros;
use phibinary;
use phiparse;
use phiobj;
use philang;
use phiops;
use phifront;

use List::Util;
use Time::HiRes qw/time/;

# Test code
our $test_id = 0;
our @tests;

sub test
{
  push @tests, pstr "test $test_id starting\n", 0x100,
               l(resolver_not_set => i_crash), i_rset,
               pnil, i_dset,
               l(@_), i_eval,
               pstr "test $test_id returning\n", 0x100;
  ++$test_id;
}

sub run_em
{
  print phifront::generic_val_type_mut."\n";
  print "${+phifront::generic_val_type_mut}\n";

  mkdir "test/images";
  open my $fh, "> test/images/bintests"
    or die "failed to create test image file: $!";
  print $fh export(l @tests);
  close $fh;

  system "./phi < test/images/bintests" and die "phi failed or crashed";
}

test lit pstr "hello world!\n", pint 0x100;

test lit 1, lit 2, i_plus, i_quote, i_type, i_symstr, i_slen, i_times;
test lit 4, i_str, lit 0, lit 65, i_sset,
                   lit 1, lit 66, i_sset,
                   lit 2, lit 67, i_sset,
                   lit 3, lit 33, i_sset,
     pint 0x100,
     pstr "\n",
     pint 0x100;

test lit 0, lit pstr "foo", i_sget;

test lit 1, i_str, lit 65, lit 0, swap, i_sset, 0x100, pstr "\n", 0x100;

test lit 0, l(lit 1), l(lit 2), if_;
test lit 1, l(lit 1), l(lit 2), if_;

print "symeq tests\n";
test lit psym"foo", lit psym"bar", i_symeq;
test lit psym"foo", lit psym"foo", i_symeq;
test lit psym"foo", pnil, i_type, i_symeq;
test lit psym"nil", pnil, i_type, i_symeq;

test pnil, i_type;

print "this should be an empty stack\n";
test lit 1, pnil, l(lit 1), if_;

print "resolver tests\n";
test resolver(k1 => l(lit 1)), i_rset, psym 'k1';
test resolver(if => l(if_)), i_rset,
     lit 0, l(lit 1), l(lit 2), psym 'if';

test resolver(if => l(if_),
              k0 => l(lit 0),
              k1 => l(lit 1),
              k2 => l(lit 2)), i_rset,
     psym 'k0', l(psym 'k1'), l(psym 'k2'), psym 'if';

# xs [f] map
# xs [f]     swap dup = [f] xs xs
# [f] xs xs  is_nil   = [f] xs <1|0>
# [f] xs <1|0> [...] [...] if
#
# nil case:
# [f] xs     swap drop             = xs
#
# non-nil case:
# [f] x:xs   uncons                = [f] xs x
# [f] xs x   [2 0 1 2] 3 restack . = [f] xs x [f] .
# [f] xs fx  rot3>                 = fx [f] xs
# fx [f] xs  swap map swap cons    = fx:(map [f] xs)

test resolver(if     => l(if_),
              swap   => l(swap),
              drop   => l(drop),
              dup    => l(dup),
              is_nil => l(i_type, lit(psym 'nil'), i_symeq),
              map    => l(psym 'swap',
                          psym 'dup',
                          psym 'is_nil',
                          l(psym 'swap', psym 'drop'),
                          l(i_uncons, l(3, 2, 0, 1, 2), i_uncons, i_restack,
                            i_eval, rot3r, psym 'swap', psym 'map',
                            psym 'swap', i_cons),
                          psym 'if')), i_rset,
     l(1, 2, 3),
     l(lit(1), i_plus),
     psym 'map';

# optimized version
test resolver(map => l(swap, dup, i_type, lit(psym 'nil'), i_symeq,
                       l(swap, drop),
                       l(i_uncons, l(3, 2, 0, 1, 2), i_uncons, i_restack,
                         i_eval, rot3r, swap, psym 'map', swap, i_cons),
                       if_)), i_rset,
     l(1, 2, 3),
     l(lit(1), i_plus),
     psym 'map';


# phiobj tests
sub tprefix { (i_quote, tail, head, head, lit i_quote, i_cons, swons, swap) }

# Let's write a point class
# Instance state: [x y]
# Methods:
#   point 'plus  point .   -> point
#   point 'dot   point .   -> number
#         'norm2 point .   -> number

use constant point_plus => l unswons,   # [[x2 y2] ...] [x1 y1] type
  rot3r, unswons, head,                 # type [[x2 y2] ...] x1 y1
  rot3l, head, unswons, head,           # type x1 y1 x2 y2
  rot3l, i_plus, pnil, swons,           # type x1 x2 [y1+y2]
  rot3r, i_plus, i_cons,                # type [x1+x2 y1+y2]
  i_cons;                               # [[x1+x2 y1+y2] type...]

use constant point_dot => l unswons,    # [[x2 y2] ...] [x1 y1] type
  rot3r, unswons, head,
  rot3l, head, unswons, head,           # type x1 y1 x2 y2
  rot3l, i_times,                       # type x1 x2 y1*y2
  rot3r, i_times, i_plus,               # type x1*x2+y1*y2
  swap, drop;                           # x1*x2+y1*y2

use constant point_norm2 => l           # [i1] t1
  dup, lit psym 'dot', swap, i_eval;

use constant point_type => l            # 'method [state]
  tprefix,                              # [state] type 'method
  dup, lit psym 'plus', i_symeq,
  l(drop, point_plus, i_eval),
  l(dup, lit psym 'dot', i_symeq,
    l(drop, point_dot, i_eval),
    l(dup, lit psym 'norm2', i_symeq,
      l(drop, point_norm2, i_eval),
      pnil,
      if_),
    if_),
  if_;

use constant point_type_looped => l     # 'method [state]
  tprefix,                              # [state] type 'method
  resolver(plus  => point_plus,
           dot   => point_dot,
           norm2 => point_norm2), i_eval, i_eval;

use constant type_type => l resolvercode, i_eval, i_eval;

# lame metaprogramming
use constant point_type_type => l
  tprefix,
  l(pcons(psym plus => point_plus),
    pcons(psym dot  => point_dot),
    pcons(psym norm2 => point_norm2)),
  type_type, i_eval;

# better metaprogramming
use constant point_type_mktype => le
  l(pcons(psym plus  => point_plus),
    pcons(psym dot   => point_dot),
    pcons(psym norm2 => point_norm2)),
  phiobj::make_type,
  i_eval;

my %point_types = (direct     => point_type,
                   looped     => point_type_looped,
                   typed_fake => point_type_type,
                   mktype     => point_type_mktype);

for (sort keys %point_types)
{
  print "point type $_\n";
  my $t = $point_types{$_};
  test pcons(l(pint 1, pint 2), $t), lit psym 'plus',
       pcons(l(pint 3, pint 4), $t), i_eval, lit psym 'plus',
       pcons(l(pint 1, pint 2), $t), i_eval, head,
       dup, head,       0x101, pstr", ", 0x100,
            tail, head, 0x101, pstr" ", 0x100;

  test pcons(l(pint 1, pint 2), $t), lit psym 'dot',
       pcons(l(pint 3, pint 4), $t), i_eval,
       0x101, pstr" ", 0x100;

  test lit psym 'norm2', pcons(l(pint 3, pint 4), $t), i_eval,
       0x101, pstr" ", 0x100;

  test pcons(l(pint 1, pint 3), $t),
       dup, lit psym 'plus', rot3l, i_eval, head, head, 0x101,
       pstr" ", 0x100;
}

print "mcall\n";
test pcons(l(pint 3, pint 4), point_type_mktype), mcall 'norm2';

print "lget\n";
test l(1, 2, 3), lit 0, lget, i_eval;
test l(1, 2, 3), lit 1, lget, i_eval;
test l(1, 2, 3), lit 2, lget, i_eval;

print "lset\n";
test l(1, 2, 3), lit 'x', lit 0, lset, i_eval;
test l(1, 2, 3), lit 'x', lit 1, lset, i_eval;
test l(1, 2, 3), lit 'x', lit 2, lset, i_eval;


# Tests from phiparse
use constant foostr => l pstr "foo", pint 0, pstr "xs";

# base tests
test lit 0, lit 1, i_lt;
test lit 1, lit 0, i_lt;

test lit 0, pstr "abc", i_sget;

# rev tests
test l(1, 2, 3),    phiparse::rev, i_eval;
test l(1, l(2, 3)), phiparse::rev, i_eval;
test pnil,          phiparse::rev, i_eval;

# parser test setup
use constant parse_success  => l lit(1), i_plus, dup;
use constant parse_success2 => l lit(2), i_plus, dup;
use constant parse_fail     => l drop, pstr "parse fail", pnil;
use constant parse_fail2    => l drop, pstr "parse fail2", pnil;

test lit(1), parse_success, i_eval;
test lit(1), parse_fail,    i_eval;

print "seq tests\n";
test lit(1), l(parse_success, parse_success),                phiparse::seq, i_eval;
test lit(1), l(parse_success, parse_success, parse_success), phiparse::seq, i_eval;
test lit(1), l(parse_success, parse_fail),                   phiparse::seq, i_eval;

print "rep tests\n";
test lit(1), parse_fail, phiparse::rep, i_eval;

use constant a_or_b => l l(l(pstr 'a', phiparse::str, i_eval),
                           l(pstr 'b', phiparse::str, i_eval)),
                          phiparse::alt, i_eval;

use constant aa => l l(l(pstr 'a', phiparse::str, i_eval),
                       l(pstr 'a', phiparse::str, i_eval)),
                     phiparse::seq, i_eval;

test l(pstr "aaaabbbbc", pint 0, pstr "rest"), l(pstr "a", phiparse::str, i_eval), phiparse::rep, i_eval;
test l(pstr "abbbbc",    pint 0, pstr "rest"), l(pstr "a", phiparse::str, i_eval), phiparse::rep, i_eval;
test l(pstr "bbbbc",     pint 0, pstr "rest"), l(pstr "a", phiparse::str, i_eval), phiparse::rep, i_eval;
test l(pstr "aaaabbbbc", pint 0, pstr "rest"), l(pstr "b", phiparse::str, i_eval), phiparse::rep, i_eval;

test l(pstr "aaaabbbbc", pint 0, pstr "rest"), a_or_b, phiparse::rep, i_eval;
test l(pstr "caaabbbbc", pint 0, pstr "rest"), a_or_b, phiparse::rep, i_eval;
test l(pstr "aaaabbbbc", pint 0, pstr "rest"), aa,     phiparse::rep, i_eval;
test l(pstr "aaabbbbc",  pint 0, pstr "rest"), aa,     phiparse::rep, i_eval;
test l(pstr "abbbbc",    pint 0, pstr "rest"), aa,     phiparse::rep, i_eval;
test l(pstr "aabbbbc",   pint 0, pstr "rest"), aa,     phiparse::rep, i_eval;

print "maybe tests\n";
test l(pstr "aaa", pint 0), pcons(pstr "a", phiparse::str), phiparse::maybe_meta, i_eval, i_eval;
test l(pstr "aaa", pint 0), pcons(pstr "b", phiparse::str), phiparse::maybe_meta, i_eval, i_eval;

print "alt tests\n";
test lit(1), l(parse_success, parse_success2), phiparse::alt, i_eval;
test lit(1), l(parse_success, parse_fail),     phiparse::alt, i_eval;
test lit(1), l(parse_fail,    parse_success2), phiparse::alt, i_eval;
test lit(1), l(parse_fail,    parse_fail),     phiparse::alt, i_eval;

test foostr, l(l(pstr "foo", phiparse::str, i_eval)), phiparse::alt, i_eval;
test foostr, l(l(pstr "bar", phiparse::str, i_eval)), phiparse::alt, i_eval;
test foostr, l(), phiparse::alt, i_eval;

test foostr, l(l(pstr "bar", phiparse::str, i_eval),
               l(pstr "foo", phiparse::str, i_eval)), phiparse::alt, i_eval;

test foostr, l(l(pstr "bar", phiparse::str, i_eval),
               l(pstr "bif", phiparse::str, i_eval),
               l(pstr "foo", phiparse::str, i_eval)), phiparse::alt, i_eval;

print "flatmap tests\n";
test lit(0), parse_success,
             l(pnil, swap, i_cons, swap, i_cons),
             l(drop, parse_success2),
             phiparse::flatmap, i_eval;

test lit(0), parse_success,
             l(i_plus),
             l(drop, parse_success2),
             phiparse::flatmap, i_eval;

test lit(0), parse_success,
             l(i_plus),
             l(drop, parse_fail),
             phiparse::flatmap, i_eval;

test lit(0), parse_fail,
             l(i_plus),
             l(drop, parse_fail2),
             phiparse::flatmap, i_eval;

# aw yeah: using a parse result to repeat the parser
test l(pstr "foofoo", pint 0, pstr "xs"),
     l(pstr "foo", phiparse::str, i_eval),
     l(pnil, swap, i_cons, swap, i_cons),
     l(pnil, swap, i_cons, phiparse::str, i_cons,
       lit i_eval, i_cons, phiparse::rev, i_eval),
     phiparse::flatmap, i_eval;

print "str tests\n";
test foostr, pstr "f",  phiparse::str, i_eval;
test foostr, pstr "fo", phiparse::str, i_eval;
test foostr, pstr "fp", phiparse::str, i_eval;

test l(pstr "foobar", pint 3, pstr "xs"), pstr "bar", phiparse::str, i_eval;

test l(pstr "foo", pint 0), pstr "foo", phiparse::str, i_eval;
test l(pstr "foo", pint 0),
     l(l(pstr "foo", phiparse::str, i_eval),
       l(pstr "a",   phiparse::str, i_eval)),
     phiparse::seq,
     i_eval;

test l(pstr "foofoo", pint 0),
     l(pstr "foo", phiparse::str, i_eval),
     phiparse::rep,
     i_eval;

print "contains tests\n";
test pstr "abc", lit 97, phiparse::contains, i_eval;
test pstr "abc", lit 96, phiparse::contains, i_eval;
test pstr "",    lit 96, phiparse::contains, i_eval;

print "oneof tests\n";
test l(pstr "", pint 0), pstr "f", lit 1, phiparse::oneof, i_eval;

test foostr, pstr "f",    lit 1, phiparse::oneof, i_eval;
test foostr, l(pstr "fo", lit 1, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

test foostr, l(pstr "of", lit 1, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

test foostr, l(pstr "ab", lit 0, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

test foostr, l(pstr "abo", lit 0, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

test foostr, l(pstr "abf", lit 0, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

test foostr, l(pstr "abfg", lit 1, phiparse::oneof, i_eval),
     phiparse::rep, i_eval;

print "map tests\n";
test foostr, l(pstr "f", phiparse::str, i_eval),
             l(drop, pstr "result"),
             phiparse::pmap, i_eval;

test foostr, l(pstr "f", phiparse::str, i_eval),
             l(i_slen),
             phiparse::pmap, i_eval;

test foostr, l(pstr "abc", phiparse::str, i_eval),
             l(i_slen),
             phiparse::pmap, i_eval;

print "filter tests\n";
test foostr, l(pstr "fo", phiparse::str, i_eval),
             l(drop, lit 1),
             phiparse::pfilter, i_eval;

test foostr, l(pstr "fo", phiparse::str, i_eval),
             l(drop, lit 0),
             phiparse::pfilter, i_eval;

test foostr, l(pstr "go", phiparse::str, i_eval),
             l(drop, lit 1),
             phiparse::pfilter, i_eval;

print "compound tests\n";
test l(pstr "aaabbbccc", pint 0),
     l(l(l(pstr "a", phiparse::str, i_eval), phiparse::rep, i_eval),
       l(l(pstr "b", phiparse::str, i_eval), phiparse::rep, i_eval),
       l(pstr "c", phiparse::str, i_eval)),
     phiparse::seq,
     i_eval;

test l(pstr "abbcaabccc", pint 0),
     l(l(l(l(pstr "a", phiparse::str, i_eval), phiparse::rep, i_eval),
         l(l(pstr "b", phiparse::str, i_eval), phiparse::rep, i_eval),
         l(pstr "c", phiparse::str, i_eval)),
       phiparse::seq, i_eval),
     phiparse::rep,
     i_eval;

test l(pstr "aaabbcc", pint 0),
     l(pstr "ab", lit 1, phiparse::oneof, i_eval),
     phiparse::rep,
     i_eval;

test l(pstr "aaabbcc", pint 0),
     l(pstr "c", lit 0, phiparse::oneof, i_eval),
     phiparse::rep,
     i_eval;

test l(pstr "aaabbcc", pint 0),
     l(pstr "x", lit 0, phiparse::oneof, i_eval),
     phiparse::rep,
     i_eval;


# Tests from phiops
sub opstest($$)
{
  test pstr "$_[0] -> ", 0x100,
       l(pstr $_[0], pint 0, $_[1]), lit phiops::opener, philang::expr,
       i_eval, i_eval, drop, mcall"val", 0x101,
       pstr "  ", 0x100;
}

print "phifront root scope\n";
opstest "4+51", phifront::root_scope;
opstest "(4)+51", phifront::root_scope;
opstest "4+(51)", phifront::root_scope;
opstest "(4)+(51)", phifront::root_scope;

opstest "((4))+(51)", phifront::root_scope;
opstest "(4)+((51))", phifront::root_scope;
opstest "((4)+((48)))+3", phifront::root_scope;
opstest "((4)+(47))+((((3+1))))", phifront::root_scope;

print "whitespace\n";
opstest " 4+51", phifront::root_scope;
opstest " 4+ 51", phifront::root_scope;
opstest "   4+  51", phifront::root_scope;
opstest "4 ", phifront::root_scope;

opstest "4  ", phifront::root_scope;
opstest "  4  ", phifront::root_scope;
opstest " 4 +  51", phifront::root_scope;

print "postfix modifiers\n";
opstest "11*5", phifront::root_scope;
opstest "(11*5)*5", phifront::root_scope;
opstest "11 * 5", phifront::root_scope;
opstest "11 * 5 + 1", phifront::root_scope;
opstest "11 + 1 * 5", phifront::root_scope;
opstest "(11 + 1) * 5", phifront::root_scope;
opstest " ( 2 + 3  )  *  (  4 + 5 ) ", phifront::root_scope;

run_em;
