#!/usr/bin/env perl
use strict;
use warnings;

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

use phiboot;
use phibootmacros;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

test lit 1, lit 2, i_plus, i_quote, i_type, i_symstr, i_slen, i_times;
test lit 4, i_str, lit 0, lit 65, i_sset,
                   lit 1, lit 66, i_sset,
                   lit 2, lit 67, i_sset,
                   lit 3, lit 33, i_sset;

test lit 0, lit "foo", i_sget;

test lit 0, l(lit 1), l(lit 2), if_;
test lit 1, l(lit 1), l(lit 2), if_;

print "this should be an empty stack\n";
test lit 1, pnil, l(lit 1), if_;

print "testing crashes\n";
eval { test i_crash };
die "failed to crash" unless $@;
print "yep! that worked\n";

print "resolver tests\n";
test resolver(k1 => l(lit 1)), i_rset, psym 'k1';
test resolver(if => l(if_)), i_rset,
     lit 0, l(lit 1), l(lit 2), psym 'if';

test resolver(if => l(if_),
              k0 => l(lit 0),
              k1 => l(lit 1),
              k2 => l(lit 2)), i_rset,
     psym 'k0', l(psym 'k1'), l(psym 'k2'), psym 'if';

# xs [f] map
# xs [f]     swap dup = [f] xs xs
# [f] xs xs  is_nil   = [f] xs <1|0>
# [f] xs <1|0> [...] [...] if
#
# nil case:
# [f] xs     swap drop             = xs
#
# non-nil case:
# [f] x:xs   uncons                = [f] xs x
# [f] xs x   [2 0 1 2] 3 restack . = [f] xs x [f] .
# [f] xs fx  rot3>                 = fx [f] xs
# fx [f] xs  swap map swap cons    = fx:(map [f] xs)

test resolver(if     => l(if_),
              swap   => l(swap),
              drop   => l(drop),
              dup    => l(dup),
              is_nil => l(i_type, lit(psym 'nil'), i_symeq),
              map    => l(psym 'swap',
                          psym 'dup',
                          psym 'is_nil',
                          l(psym 'swap', psym 'drop'),
                          l(i_uncons, l(3, 2, 0, 1, 2), i_uncons, i_restack,
                            i_eval, rot3r, psym 'swap', psym 'map',
                            psym 'swap', 0x05),
                          psym 'if')), i_rset,
     l(1, 2, 3),
     l(lit(1), i_plus),
     psym 'map';

# optimized version
test resolver(map => l(swap, dup, i_type, lit(psym 'nil'), i_symeq,
                       l(swap, drop),
                       l(i_uncons, l(3, 2, 0, 1, 2), i_uncons, i_restack,
                         i_eval, rot3r, swap, psym 'map', swap, i_cons),
                       if_)), i_rset,
     l(1, 2, 3),
     l(lit(1), i_plus),
     psym 'map';
