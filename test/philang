#!/usr/bin/env perl
use strict;
use warnings;

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

$|++;

use phiboot;
use phibootmacros;
use phiparse;
use phiobj;
use philang;
use phitypes;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

print "atom tests\n";
test l(pstr "foo", pint 0),
     l(pnil, l(l(pstr "foo", phiparse::str, i_eval)), pnil, pnil),
       philang::scope_chain_type, swons,
     mcall"parser_atom",
     i_eval;

test l(pstr "foo", pint 0),
     l(pnil, l(l(pstr "bar", phiparse::str, i_eval),
               l(pstr "foo", phiparse::str, i_eval),
               l(pstr "bif", phiparse::str, i_eval)), pnil, pnil),
       philang::scope_chain_type, swons,
     mcall"parser_atom",
     i_eval;

test l(pstr "baz", pint 0),
     l(pnil, l(l(pstr "bar", phiparse::str, i_eval),
               l(pstr "foo", phiparse::str, i_eval),
               l(pstr "bif", phiparse::str, i_eval)), pnil, pnil),
       philang::scope_chain_type, swons,
     mcall"parser_atom",
     i_eval;

test l(pstr "foo", pint 0,
       pcons(l(pnil, l(l(pstr "foo", phiparse::str, i_eval)), pnil, pnil),
             philang::scope_chain_type)),
     philang::atom,
     i_eval, tail, head;

print "capture\n";
use phi int_123 => pcons(l(123), phitypes::int_type);
use phi int_456 => pcons(l(456), phitypes::int_type);

use phi foo_scope =>
  pcons l(pnil,
          l(l(l(drop, int_123),
              l(pstr "foo", phiparse::str, i_eval),
              phiparse::pmap, i_eval),
            phitypes::int_literal),
          pnil),
        philang::scope_chain_type;

use phi bar_scope =>      # a child of foo_scope
  pcons l(foo_scope,
          l(l(l(drop, int_456),
              l(pstr "bar", phiparse::str, i_eval),
              phiparse::pmap, i_eval)),
          pnil),
        philang::scope_chain_type;

test l(pstr "foo", pint 0, bar_scope),
     philang::atom,
     i_eval,
     tail, head;

test l(pstr "barfoofoo", pint 3, bar_scope),
     l(philang::atom, philang::atom),
     phiparse::seq,
     i_eval,
     tail, head;

test l(pstr "barfoofoo", pint 3, bar_scope),
     l(philang::atom, philang::atom),
     phiparse::seq,
     i_eval,
     tail, tail, head,
     mcall"capture";

test l(pstr "barfoofoo", pint 3, bar_scope),
     l(philang::atom, philang::atom),
     phiparse::seq,
     i_eval,
     tail, tail, head,
     mcall"parent",
     mcall"capture";

print "expr vs atom\n";
use phi root_expr => le pnil, philang::expr, i_eval;

test l(pstr "foo", pint 0, foo_scope), philang::atom, i_eval, drop, mcall"val";
test l(pstr "foo", pint 0, foo_scope), root_expr, i_eval, drop, mcall"val";

print "...with capture\n";
test l(pstr "foo", pint 0, bar_scope), philang::atom, i_eval, drop, mcall"deref";
test l(pstr "foo", pint 0, bar_scope), root_expr, i_eval, drop, mcall"deref";
