#!/usr/bin/env perl
use strict;
use warnings;

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

$|++;

use phiboot;
use phibootmacros;
use phiparse;
use philocal;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

sub tprefix { (i_quote, tail, head, head, lit i_quote, i_cons, swons, swap) }

# Let's write a point class
# Instance state: [x y]
# Methods:
#   point 'plus  point .   -> point
#   point 'dot   point .   -> number
#         'norm2 point .   -> number

use constant point_plus => l unswons,   # [[x2 y2] ...] [x1 y1] type
  rot3r, unswons, head,                 # type [[x2 y2] ...] x1 y1
  rot3l, head, unswons, head,           # type x1 y1 x2 y2
  rot3l, i_plus, pnil, swons,           # type x1 x2 [y1+y2]
  rot3r, i_plus, i_cons,                # type [x1+x2 y1+y2]
  i_cons;                               # [[x1+x2 y1+y2] type...]

use constant point_dot => l unswons,    # [[x2 y2] ...] [x1 y1] type
  rot3r, unswons, head,
  rot3l, head, unswons, head,           # type x1 y1 x2 y2
  rot3l, i_times,                       # type x1 x2 y1*y2
  rot3r, i_times, i_plus,               # type x1*x2+y1*y2
  swap, drop;                           # x1*x2+y1*y2

use constant point_norm2 => l           # [i1] t1
  dup, lit psym 'dot', swap, i_eval;

use constant point_type => l            # 'method [state]
  tprefix,                              # [state] type 'method
  dup, lit psym 'plus', i_symeq,
  l(drop, point_plus, i_eval),
  l(dup, lit psym 'dot', i_symeq,
    l(drop, point_dot, i_eval),
    l(dup, lit psym 'norm2', i_symeq,
      l(drop, point_norm2, i_eval),
      pnil,
      if_),
    if_),
  if_;

use constant point_type_looped => l     # 'method [state]
  tprefix,                              # [state] type 'method
  resolver(plus  => point_plus,
           dot   => point_dot,
           norm2 => point_norm2), i_eval, i_eval;

use constant type_type => l resolvercode, i_eval, i_eval;

# lame metaprogramming
use constant point_type_type => l
  tprefix,
  l(pcons(psym plus => point_plus),
    pcons(psym dot  => point_dot),
    pcons(psym norm2 => point_norm2)),
  type_type, i_eval;

my %point_types = (direct     => point_type,
                   looped     => point_type_looped,
                   typed_fake => point_type_type);

for (sort keys %point_types)
{
  print "point type $_\n";
  my $t = $point_types{$_};
  test pcons(l(pint 1, pint 2), $t), lit psym 'plus',
       pcons(l(pint 3, pint 4), $t), i_eval, lit psym 'plus',
       pcons(l(pint 1, pint 2), $t), i_eval, head;

  test pcons(l(pint 1, pint 2), $t), lit psym 'dot',
       pcons(l(pint 3, pint 4), $t), i_eval;

  test lit psym 'norm2', pcons(l(pint 3, pint 4), $t), i_eval;

  test pcons(l(pint 1, pint 3), $t),
       dup, lit psym 'plus', rot3l, i_eval, head;
}
