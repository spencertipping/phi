#!/usr/bin/env perl
use strict;
use warnings;

use phiboot;
use phibootmacros;
use phiparse;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

# base tests
test lit 0, lit 1, i_lt;
test lit 1, lit 0, i_lt;

test lit 0, pstr "abc", i_sget;

# rev tests
test l(1, 2, 3),    phiparse::rev, i_eval;
test l(1, l(2, 3)), phiparse::rev, i_eval;
test pnil,          phiparse::rev, i_eval;

# parser test setup
use constant parse_success  => l lit(1), i_plus, dup;
use constant parse_success2 => l lit(2), i_plus, dup;
use constant parse_fail     => l drop, pstr "parse fail", pnil;
use constant parse_fail2    => l drop, pstr "parse fail2", pnil;

test lit(1), parse_success, i_eval;
test lit(1), parse_fail,    i_eval;

# seq tests
test lit(1), l(parse_success, parse_success),                phiparse::seq, i_eval;
test lit(1), l(parse_success, parse_success, parse_success), phiparse::seq, i_eval;
test lit(1), l(parse_success, parse_fail),                   phiparse::seq, i_eval;

# alt tests
test lit(1), l(parse_success, parse_success2), phiparse::alt, i_eval;
test lit(1), l(parse_fail,    parse_success2), phiparse::alt, i_eval;
test lit(1), l(parse_fail,    parse_fail),     phiparse::alt, i_eval;

# flatmap tests
test lit(0), parse_success,
             l(pnil, swap, i_cons, swap, i_cons),
             l(drop, parse_success2),
             phiparse::flatmap, i_eval;

test lit(0), parse_success,
             l(i_plus),
             l(drop, parse_success2),
             phiparse::flatmap, i_eval;

test lit(0), parse_success,
             l(i_plus),
             l(drop, parse_fail),
             phiparse::flatmap, i_eval;

test lit(0), parse_fail,
             l(i_plus),
             l(drop, parse_fail2),
             phiparse::flatmap, i_eval;
