#!/usr/bin/env perl
use strict;
use warnings;

BEGIN { push @INC, $0 =~ s/[^\/]+$/../r }

$|++;

use phiboot;
use phibootmacros;
use phiparse;
use phiobj;
use philang;
use phitypes;

use List::Util;
use Time::HiRes qw/time/;

# Test code
sub test
{
  my $method = $_[0] eq 'trace' ? shift : 'run';
  my $ilist = l @_;
  my $st = time;
  my $i  = phiboot::i->new->push($ilist)->i2->$method;
  my $dt = 1000 * (time - $st);
  printf "%.2fms: %s\n", $dt, $$i[0];
}

use phi int_123 => pcons(l(123), phitypes::int_type);
use phi int_456 => pcons(l(456), phitypes::int_type);

use phi foo_scope =>
  pcons l(pnil,
          l(l(l(drop, int_123),
              l(pstr "foo", phiparse::str, i_eval),
              phiparse::pmap, i_eval),
            phitypes::int_literal),
          pnil),
        philang::scope_chain_type;

use phi bar_scope =>      # a child of foo_scope
  pcons l(foo_scope,
          l(l(l(drop, int_456),
              l(pstr "bar", phiparse::str, i_eval),
              phiparse::pmap, i_eval)),
          pnil),
        philang::scope_chain_type;

print "expressions\n";
test l(pstr "foo",        pint 0, foo_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357",       pint 0, foo_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357+45",    pint 0, foo_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357+45+45", pint 0, foo_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";

print "same, but child scope\n";
test l(pstr "foo",        pint 0, bar_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357",       pint 0, bar_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357+45",    pint 0, bar_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "1357+45+45", pint 0, bar_scope), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";

print "parens\n";
use phi ints_and_parens =>
  pcons l(bar_scope,
          l(phitypes::paren_literal,
            phitypes::whitespace_literal,
            phitypes::timesop_literal,
            phitypes::int_literal),
          pnil,
          pnil),
        philang::scope_chain_type;

#test l(pstr "4+51", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "(4)+51", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "4+(51)", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "(4)+(51)", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "((4))+(51)", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "((4)+(51))", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr "((4)+(48))+3", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "((4)+(47))+((((3+1))))", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";

print "whitespace\n";
#test l(pstr " 4+51", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
#test l(pstr " 4+ 51", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
test l(pstr "   4+  51", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";

print "postfix modifiers\n";
test l(pstr "11*5", pint 0, ints_and_parens), pnil, philang::expr, i_eval, i_eval, drop, mcall"val";
